
.container{
    //investigar si usar width: o max-width:
    width:$container-width;
    margin:#{$margin-container} auto;
}

.container-expanded{
    width:100%;
   // margin: $margin-container 0;
}

.row {
    display: -webkit-box; /* OLD - iOS 6-, Safari 3.1-6, BB7 */
    display: -ms-flexbox; /* TWEENER - IE 10 */
    display: -webkit-flex; /* NEW - Safari 6.1+. iOS 7.1+, BB10 */
    display: flex;
    flex-direction: $flex-direction-value;
    flex-wrap: $flex-wrap-value;
  }

/// Función que devuelve la anchura correspondiente al elemento de la maquetación
/// @parameter {integer} $i - Número de casillas en el alcho de la fila que va a ocupar
/// @return {integer} - El porcentaje (sin el símbolo %, del ancho que le corresponde al elemento
/// @group Layout
@function anchura_col($i) {
    @return (100 / $num_elementos)*$i ;
  }


  @for $i from 1 through $num_elementos {
    .row > .col-#{$i} {
      flex: $flex-gwow-value $flex-shrink-value #{anchura_col($i)}+ "%";
      max-width: #{anchura_col($i)}+ "%";
    }
  }

  
  @each $k, $v in $breakpoints {
    @media (min-width: #{$v}) {
      //Bucle para generar las clases de las columnas responsivas
      @for $i from 1 through $num_elementos {
        .row > .col-#{$k+"-"+$i} {
          flex: $flex-gwow-value $flex-shrink-value  #{anchura_col($i)}+ "%";
          max-width: #{anchura_col($i)}+ "%";
        }
      }
    }
  }

  //--------------Generacion de alineacion horizontal--------------
  @each $k,$v in $hor-center-values{
    .justify-#{$k}{
      justify-content: #{$v}
    }
  }

  @each $k,$v in $ver-center-values{
    .aling-#{$k}{
      align-items: #{$v}
    }
  }

